<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>クラッシュロワイヤル 交流戦ランキング</title>
    <style>
        body {
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 10px;
            background: linear-gradient(135deg, #dc2626 0%, #2563eb 100%);
            min-height: 100vh;
        }
        
        @media (min-width: 768px) {
            body {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="max-w-6xl mx-auto">
        <!-- ヘッダー -->
        <div class="text-center mb-6 sm:mb-8">
            <h1 class="text-2xl sm:text-4xl font-bold text-white mb-2 sm:mb-4">⚔️ クラッシュロワイヤル交流戦</h1>
            <p class="text-white/80 text-sm sm:text-lg">交流戦結果管理システム</p>
            <div class="mt-2 text-white/60 text-xs sm:text-sm">
                💾 データは自動保存されます
            </div>
        </div>

        <!-- タブナビゲーション -->
        <div class="bg-white rounded-lg shadow-lg mb-4 sm:mb-6">
            <div class="flex border-b" id="tab-navigation">
                <button id="tab-input" class="flex-1 py-3 sm:py-4 px-4 sm:px-6 text-center font-semibold text-blue-600 border-b-2 border-blue-600 bg-blue-50 text-sm sm:text-base">
                    ⚔️ 戦績入力
                </button>
                <button id="tab-ranking" class="flex-1 py-3 sm:py-4 px-4 sm:px-6 text-center font-semibold text-gray-600 hover:text-blue-600 hover:bg-gray-50 text-sm sm:text-base">
                    🏆 ランキング
                </button>
                <button id="tab-data" class="flex-1 py-3 sm:py-4 px-4 sm:px-6 text-center font-semibold text-gray-600 hover:text-blue-600 hover:bg-gray-50 text-sm sm:text-base">
                    📊 データ管理
                </button>
            </div>
        </div>

        <!-- 戦績入力タブ -->
        <div id="input-section" class="bg-white rounded-lg shadow-lg p-4 sm:p-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-800 mb-4 sm:mb-6">⚔️ 交流戦結果を入力</h2>
            
            <div class="p-4 bg-blue-50 rounded-lg border border-blue-200 mb-4 sm:mb-6">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="sm:col-span-2 lg:col-span-1">
                        <label class="block text-sm font-semibold text-gray-700 mb-2">プレイヤー名</label>
                        <input type="text" id="player-name" placeholder="プレイヤー名を入力" 
                               class="w-full px-4 py-3 text-base border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">自タワー破壊数</label>
                        <input type="number" id="own-towers" placeholder="0" min="0" max="3" 
                               class="w-full px-4 py-3 text-base text-center border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">敵タワー破壊数</label>
                        <input type="number" id="enemy-towers" placeholder="0" min="0" max="3" 
                               class="w-full px-4 py-3 text-base text-center border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div class="sm:col-span-2 lg:col-span-1">
                        <label class="block text-sm font-semibold text-gray-700 mb-2">勝敗判定</label>
                        <div id="match-result-display" class="w-full px-4 py-3 border border-gray-200 rounded-lg bg-gray-50 text-center font-semibold text-base">
                            自動判定
                        </div>
                    </div>
                </div>
                <button onclick="addResult()" class="mt-4 sm:mt-6 w-full py-3 sm:py-4 text-base sm:text-lg bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold">
                    戦績を記録
                </button>
            </div>

            <div class="p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                <div class="flex items-center gap-3 mb-4">
                    <span class="text-xl sm:text-2xl">💡</span>
                    <h3 class="text-base sm:text-lg font-semibold text-yellow-800">使い方</h3>
                </div>
                <ul class="text-yellow-700 space-y-1 text-sm mb-4">
                    <li>• プレイヤー名と試合結果を入力してください</li>
                    <li>• 敵タワー破壊数 > 自タワー破壊数 = 勝利</li>
                    <li>• 敵タワー破壊数 < 自タワー破壊数 = 敗北</li>
                    <li>• 引き分け（同数）は記録できません</li>
                    <li>• データは自動的にブラウザに保存されます</li>
                </ul>
                
                <div class="border-t border-yellow-300 pt-4">
                    <h4 class="text-base sm:text-lg font-semibold text-yellow-800 mb-3">📊 スコア計算方法</h4>
                    <div class="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 text-sm">
                        <div class="text-center p-3 bg-white rounded-lg">
                            <div class="text-green-600 font-semibold text-lg">+3pt</div>
                            <div class="text-yellow-700">勝利ボーナス</div>
                        </div>
                        <div class="text-center p-3 bg-white rounded-lg">
                            <div class="text-orange-600 font-semibold text-lg">+2pt</div>
                            <div class="text-yellow-700">敵タワー破壊1個</div>
                        </div>
                        <div class="text-center p-3 bg-white rounded-lg">
                            <div class="text-red-600 font-semibold text-lg">-1pt</div>
                            <div class="text-yellow-700">自タワー破壊1個</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ランキングタブ -->
        <div id="ranking-section" class="bg-white rounded-lg shadow-lg p-4 sm:p-6 hidden">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-800 mb-4 sm:mb-6">🏆 交流戦ランキング</h2>
            
            <div id="ranking-list" class="space-y-3"></div>
        </div>

        <!-- データ管理タブ -->
        <div id="data-section" class="bg-white rounded-lg shadow-lg p-4 sm:p-6 hidden">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-800 mb-4 sm:mb-6">📊 データ管理</h2>
            
            <div class="space-y-4">
                <div class="p-4 bg-green-50 rounded-lg border border-green-200">
                    <div class="flex items-center gap-3 mb-3">
                        <span class="text-2xl">💾</span>
                        <h3 class="text-lg font-semibold text-green-800">保存状況</h3>
                    </div>
                    <div id="save-status" class="text-green-700 text-sm">
                        データは自動的に保存されています
                    </div>
                </div>

                <div class="p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <div class="flex items-center gap-3 mb-3">
                        <span class="text-2xl">📤</span>
                        <h3 class="text-lg font-semibold text-blue-800">データエクスポート・印刷</h3>
                    </div>
                    <p class="text-blue-700 text-sm mb-3">データのダウンロードや印刷用レポートを作成できます</p>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <button onclick="exportData()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold text-sm">
                            📊 データをダウンロード
                        </button>
                        <button onclick="printReport()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 font-semibold text-sm">
                            🖨️ 印刷用レポート
                        </button>
                    </div>
                </div>

                <div class="p-4 bg-orange-50 rounded-lg border border-orange-200">
                    <div class="flex items-center gap-3 mb-3">
                        <span class="text-2xl">📥</span>
                        <h3 class="text-lg font-semibold text-orange-800">データインポート</h3>
                    </div>
                    <p class="text-orange-700 text-sm mb-3">以前にエクスポートしたJSONファイルを読み込めます</p>
                    <input type="file" id="import-file" accept=".json" class="mb-3 text-sm">
                    <button onclick="importData()" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 font-semibold text-sm">
                        データを読み込み
                    </button>
                </div>

                <div class="p-4 bg-red-50 rounded-lg border border-red-200">
                    <div class="flex items-center gap-3 mb-3">
                        <span class="text-2xl">🗑️</span>
                        <h3 class="text-lg font-semibold text-red-800">データリセット</h3>
                    </div>
                    <p class="text-red-700 text-sm mb-3">⚠️ 全てのデータが削除されます。この操作は取り消せません。</p>
                    <button onclick="resetData()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 font-semibold text-sm">
                        全データを削除
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let results = [];

        // ローカルストレージからデータを読み込み
        function loadData() {
            const savedData = localStorage.getItem('clash-royale-results');
            if (savedData) {
                try {
                    results = JSON.parse(savedData);
                    console.log('データを読み込みました:', results.length + '件');
                    updateSaveStatus();
                } catch (e) {
                    console.error('データの読み込みに失敗しました:', e);
                    results = [];
                }
            }
        }

        // ローカルストレージにデータを保存
        function saveData() {
            try {
                localStorage.setItem('clash-royale-results', JSON.stringify(results));
                console.log('データを保存しました:', results.length + '件');
                updateSaveStatus();
            } catch (e) {
                console.error('データの保存に失敗しました:', e);
                alert('データの保存に失敗しました。ブラウザの容量が不足している可能性があります。');
            }
        }

        // 保存状況を更新
        function updateSaveStatus() {
            const statusElement = document.getElementById('save-status');
            if (statusElement) {
                const playerCount = results.length;
                const totalMatches = results.reduce((sum, result) => sum + result.matches, 0);
                statusElement.innerHTML = `
                    <div>保存済みプレイヤー数: <strong>${playerCount}人</strong></div>
                    <div>保存済み試合数: <strong>${totalMatches}試合</strong></div>
                    <div class="text-xs mt-1 text-green-600">最終保存: ${new Date().toLocaleString('ja-JP')}</div>
                `;
            }
        }

        // データエクスポート（ポイント計算済み）
        function exportData() {
            if (results.length === 0) {
                alert('エクスポートするデータがありません');
                return;
            }

            // ポイント計算を含めたデータを作成
            const exportData = results.map(result => {
                const winRate = result.matches > 0 ? (result.wins / result.matches * 100) : 0;
                const winBonus = result.wins * 3;
                const towerBonus = result.enemyTowers * 2;
                const towerPenalty = result.ownTowers * 1;
                const totalScore = winBonus + towerBonus - towerPenalty;
                
                return {
                    ...result,
                    winRate: Math.round(winRate * 10) / 10,
                    winBonus,
                    towerBonus,
                    towerPenalty,
                    totalScore
                };
            });

            const dataStr = JSON.stringify(exportData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `clash-royale-data-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            URL.revokeObjectURL(url);
        }

        // 印刷用レポート作成
        function printReport() {
            if (results.length === 0) {
                alert('印刷するデータがありません');
                return;
            }

            // ランキング計算
            const rankings = results.map(result => {
                const winRate = result.matches > 0 ? (result.wins / result.matches * 100) : 0;
                const winBonus = result.wins * 3;
                const towerBonus = result.enemyTowers * 2;
                const towerPenalty = result.ownTowers * 1;
                const totalScore = winBonus + towerBonus - towerPenalty;
                
                return {
                    ...result,
                    winRate,
                    winBonus,
                    towerBonus,
                    towerPenalty,
                    totalScore
                };
            });

            rankings.sort((a, b) => {
                if (b.totalScore !== a.totalScore) return b.totalScore - a.totalScore;
                if (b.winRate !== a.winRate) return b.winRate - a.winRate;
                return b.wins - a.wins;
            });

            const printWindow = window.open('', '_blank');
            printWindow.document.write('<!DOCTYPE html><html><head><meta charset="UTF-8"><title>クラッシュロワイヤル交流戦ランキング</title><style>body{font-family:Arial,sans-serif;margin:20px;color:#333}.header{text-align:center;margin-bottom:30px;border-bottom:3px solid #2563eb;padding-bottom:15px}.title{font-size:24px;font-weight:bold;color:#2563eb;margin-bottom:5px}.subtitle{font-size:14px;color:#666}.summary{background:#f8fafc;padding:15px;border-radius:8px;margin-bottom:20px}.summary-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:10px}.summary-item{text-align:center}.summary-value{font-size:18px;font-weight:bold;color:#2563eb}.summary-label{font-size:12px;color:#666}table{width:100%;border-collapse:collapse;margin-top:20px}th,td{padding:8px;text-align:center;border:1px solid #ddd}th{background:#2563eb;color:white;font-weight:bold}.rank-1{background:#fef3c7}.rank-2{background:#f3f4f6}.rank-3{background:#fed7aa}.score-breakdown{font-size:11px;color:#666}.footer{margin-top:30px;text-align:center;font-size:12px;color:#666;border-top:1px solid #ddd;padding-top:15px}@media print{body{margin:0}.no-print{display:none}}</style></head><body><div class="header"><div class="title">⚔️ クラッシュロワイヤル交流戦ランキング</div><div class="subtitle">作成日時: ' + new Date().toLocaleString('ja-JP') + '</div></div><div class="summary"><h3 style="margin-top:0;color:#2563eb">📊 大会サマリー</h3><div class="summary-grid"><div class="summary-item"><div class="summary-value">' + rankings.length + '</div><div class="summary-label">参加者数</div></div><div class="summary-item"><div class="summary-value">' + rankings.reduce((sum, r) => sum + r.matches, 0) + '</div><div class="summary-label">総試合数</div></div><div class="summary-item"><div class="summary-value">' + rankings.reduce((sum, r) => sum + r.enemyTowers, 0) + '</div><div class="summary-label">総破壊タワー数</div></div><div class="summary-item"><div class="summary-value">' + Math.max(...rankings.map(r => r.totalScore)) + '</div><div class="summary-label">最高スコア</div></div></div></div><table><thead><tr><th>順位</th><th>プレイヤー名</th><th>総合スコア</th><th>戦績</th><th>勝率</th><th>敵タワー破壊</th><th>自タワー破壊</th><th>スコア詳細</th></tr></thead><tbody>' + rankings.map((ranking, index) => {
                let rowClass = '';
                let rankDisplay = '';
                
                if (index === 0) {
                    rowClass = 'rank-1';
                    rankDisplay = '🥇 1位';
                } else if (index === 1) {
                    rowClass = 'rank-2';
                    rankDisplay = '🥈 2位';
                } else if (index === 2) {
                    rowClass = 'rank-3';
                    rankDisplay = '🥉 3位';
                } else {
                    rankDisplay = (index + 1) + '位';
                }

                return '<tr class="' + rowClass + '"><td><strong>' + rankDisplay + '</strong></td><td><strong>' + ranking.player + '</strong></td><td><strong>' + ranking.totalScore + 'pt</strong></td><td>' + ranking.wins + '勝' + ranking.losses + '敗</td><td>' + ranking.winRate.toFixed(1) + '%</td><td>' + ranking.enemyTowers + '個</td><td>' + ranking.ownTowers + '個</td><td class="score-breakdown">勝利: ' + ranking.winBonus + 'pt<br>敵タワー: +' + ranking.towerBonus + 'pt<br>自タワー: -' + ranking.towerPenalty + 'pt</td></tr>';
            }).join('') + '</tbody></table><div class="footer"><div><strong>スコア計算方法:</strong> 勝利ボーナス(+3pt) + 敵タワー破壊(+2pt/個) - 自タワー破壊(-1pt/個)</div><div style="margin-top:5px">クラッシュロワイヤル交流戦管理システム</div></div><div class="no-print" style="margin-top:20px;text-align:center"><button onclick="window.print()" style="padding:10px 20px;background:#2563eb;color:white;border:none;border-radius:5px;cursor:pointer">🖨️ 印刷する</button><button onclick="window.close()" style="padding:10px 20px;background:#6b7280;color:white;border:none;border-radius:5px;cursor:pointer;margin-left:10px">閉じる</button></div></body></html>');
            printWindow.document.close();
        }

        // データインポート
        function importData() {
            const fileInput = document.getElementById('import-file');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('ファイルを選択してください');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    if (Array.isArray(importedData)) {
                        if (confirm('現在のデータを上書きしますか？（現在のデータは失われます）')) {
                            results = importedData;
                            saveData();
                            alert('データを正常に読み込みました');
                            fileInput.value = '';
                        }
                    } else {
                        alert('無効なファイル形式です');
                    }
                } catch (error) {
                    alert('ファイルの読み込みに失敗しました');
                }
            };
            reader.readAsText(file);
        }

        // データリセット
        function resetData() {
            if (confirm('本当に全てのデータを削除しますか？\nこの操作は取り消せません。')) {
                if (confirm('最終確認：全データが削除されます。よろしいですか？')) {
                    results = [];
                    localStorage.removeItem('clash-royale-results');
                    updateSaveStatus();
                    alert('全てのデータを削除しました');
                }
            }
        }

        // タブ切り替え
        function switchTab(tab) {
            // タブボタンのスタイル更新
            document.querySelectorAll('[id^="tab-"]').forEach(btn => {
                btn.className = 'flex-1 py-3 sm:py-4 px-4 sm:px-6 text-center font-semibold text-gray-600 hover:text-blue-600 hover:bg-gray-50 text-sm sm:text-base';
            });
            document.getElementById(`tab-${tab}`).className = 'flex-1 py-3 sm:py-4 px-4 sm:px-6 text-center font-semibold text-blue-600 border-b-2 border-blue-600 bg-blue-50 text-sm sm:text-base';

            // セクション表示切り替え
            document.getElementById('input-section').classList.add('hidden');
            document.getElementById('ranking-section').classList.add('hidden');
            document.getElementById('data-section').classList.add('hidden');
            document.getElementById(`${tab}-section`).classList.remove('hidden');

            if (tab === 'ranking') {
                updateRanking();
            } else if (tab === 'data') {
                updateSaveStatus();
            }
        }

        // 戦績追加
        function addResult() {
            const playerName = document.getElementById('player-name').value.trim();
            const ownTowers = parseInt(document.getElementById('own-towers').value) || 0;
            const enemyTowers = parseInt(document.getElementById('enemy-towers').value) || 0;

            if (!playerName) {
                alert('プレイヤー名を入力してください');
                return;
            }

            // タワー破壊数の範囲チェック
            if (ownTowers < 0 || ownTowers > 3) {
                alert('自タワー破壊数は0～3の範囲で入力してください');
                return;
            }

            if (enemyTowers < 0 || enemyTowers > 3) {
                alert('敵タワー破壊数は0～3の範囲で入力してください');
                return;
            }

            // 勝敗判定
            let isWin;
            if (enemyTowers > ownTowers) {
                isWin = true;
            } else if (enemyTowers < ownTowers) {
                isWin = false;
            } else {
                alert('引き分け（同数）は記録できません');
                return;
            }

            // 既存プレイヤーを検索
            const existingIndex = results.findIndex(result => result.player === playerName);
            
            if (existingIndex >= 0) {
                // 既存プレイヤーの場合：データを加算
                if (isWin) {
                    results[existingIndex].wins += 1;
                } else {
                    results[existingIndex].losses += 1;
                }
                results[existingIndex].matches += 1;
                results[existingIndex].enemyTowers += enemyTowers;
                results[existingIndex].ownTowers += ownTowers;
                results[existingIndex].timestamp = new Date().toLocaleString('ja-JP');
            } else {
                // 新規プレイヤーの場合
                const result = {
                    player: playerName,
                    wins: isWin ? 1 : 0,
                    losses: isWin ? 0 : 1,
                    matches: 1,
                    enemyTowers,
                    ownTowers,
                    timestamp: new Date().toLocaleString('ja-JP')
                };
                results.push(result);
            }

            // データを保存
            saveData();

            // フォームリセット
            document.getElementById('player-name').value = '';
            document.getElementById('own-towers').value = '';
            document.getElementById('enemy-towers').value = '';
            document.getElementById('match-result-display').textContent = '自動判定';
            document.getElementById('match-result-display').className = 'w-full px-4 py-3 border border-gray-200 rounded-lg bg-gray-50 text-center font-semibold text-base';

            // 成功メッセージ
            const button = document.querySelector('button[onclick="addResult()"]');
            const originalText = button.textContent;
            button.textContent = '✅ 戦績を記録・保存しました！';
            button.className = 'mt-4 sm:mt-6 w-full py-3 sm:py-4 text-base sm:text-lg bg-green-600 text-white rounded-lg font-semibold';
            
            setTimeout(() => {
                button.textContent = originalText;
                button.className = 'mt-4 sm:mt-6 w-full py-3 sm:py-4 text-base sm:text-lg bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold';
            }, 2000);
        }

        // ランキング更新
        function updateRanking() {
            const container = document.getElementById('ranking-list');
            
            if (results.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-center py-8">まだ戦績が入力されていません</p>';
                return;
            }

            // ランキング計算
            const rankings = results.map(result => {
                const winRate = result.matches > 0 ? (result.wins / result.matches * 100) : 0;
                const winBonus = result.wins * 3;
                const towerBonus = result.enemyTowers * 2;
                const towerPenalty = result.ownTowers * 1;
                const totalScore = winBonus + towerBonus - towerPenalty;
                
                return {
                    ...result,
                    winRate,
                    winBonus,
                    towerBonus,
                    towerPenalty,
                    totalScore
                };
            });

            // スコア順でソート
            rankings.sort((a, b) => {
                if (b.totalScore !== a.totalScore) return b.totalScore - a.totalScore;
                if (b.winRate !== a.winRate) return b.winRate - a.winRate;
                return b.wins - a.wins;
            });

            container.innerHTML = rankings.map((ranking, index) => {
                let rankIcon = '';
                let bgColor = '';
                let borderColor = '';
                
                if (index === 0) {
                    rankIcon = '🥇';
                    bgColor = 'bg-gradient-to-r from-yellow-50 to-yellow-100';
                    borderColor = 'border-yellow-300';
                } else if (index === 1) {
                    rankIcon = '🥈';
                    bgColor = 'bg-gradient-to-r from-gray-50 to-gray-100';
                    borderColor = 'border-gray-300';
                } else if (index === 2) {
                    rankIcon = '🥉';
                    bgColor = 'bg-gradient-to-r from-orange-50 to-orange-100';
                    borderColor = 'border-orange-300';
                } else {
                    rankIcon = `${index + 1}位`;
                    bgColor = 'bg-white';
                    borderColor = 'border-gray-200';
                }

                return `<div class="p-4 sm:p-6 ${bgColor} ${borderColor} border-2 rounded-xl hover:shadow-lg transition-all duration-300">
                    <div class="flex flex-col sm:flex-row items-start sm:items-center gap-4 sm:gap-6">
                        <div class="flex items-center justify-center w-12 h-12 sm:w-16 sm:h-16 bg-white rounded-full shadow-md flex-shrink-0">
                            ${index < 3 ? 
                                `<span class="text-2xl sm:text-3xl">${rankIcon}</span>` : 
                                `<span class="text-sm sm:text-lg font-bold text-gray-700">${rankIcon}</span>`
                            }
                        </div>
                        <div class="flex-1 w-full">
                            <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-3">
                                <span class="text-xl sm:text-2xl font-bold text-gray-800">${ranking.player}</span>
                                <span class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm font-semibold self-start">
                                    ${ranking.totalScore}pt
                                </span>
                            </div>
                            <div class="grid grid-cols-2 sm:flex sm:items-center gap-2 sm:gap-4 text-xs sm:text-sm">
                                <span class="flex items-center gap-1 text-green-600">
                                    <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                                    戦績: ${ranking.wins}勝${ranking.losses}敗
                                </span>
                                <span class="flex items-center gap-1 text-blue-600">
                                    <span class="w-2 h-2 bg-blue-400 rounded-full"></span>
                                    勝率: ${ranking.winRate.toFixed(1)}%
                                </span>
                                <span class="flex items-center gap-1 text-orange-600">
                                    <span class="w-2 h-2 bg-orange-400 rounded-full"></span>
                                    敵タワー: ${ranking.enemyTowers}個
                                </span>
                                <span class="flex items-center gap-1 text-red-600">
                                    <span class="w-2 h-2 bg-red-400 rounded-full"></span>
                                    自タワー: ${ranking.ownTowers}個
                                </span>
                            </div>
                        </div>
                        <div class="w-full sm:w-auto sm:text-right border-t sm:border-t-0 pt-3 sm:pt-0">
                            <div class="text-xs text-gray-500 mb-2 sm:mb-1">スコア詳細</div>
                            <div class="text-xs sm:text-sm text-gray-600 space-y-1">
                                <div class="flex justify-between gap-2">
                                    <span>勝利ボーナス:</span>
                                    <span class="font-semibold text-green-600">${ranking.winBonus}pt</span>
                                </div>
                                ${ranking.towerBonus > 0 ? `<div class="flex justify-between gap-2">
                                    <span>敵タワー破壊:</span>
                                    <span class="font-semibold text-orange-600">+${ranking.towerBonus}pt</span>
                                </div>` : ''}
                                ${ranking.towerPenalty > 0 ? `<div class="flex justify-between gap-2">
                                    <span>自タワー破壊:</span>
                                    <span class="font-semibold text-red-600">-${ranking.towerPenalty}pt</span>
                                </div>` : ''}
                                <div class="border-t pt-1 flex justify-between gap-2">
                                    <span class="font-semibold">合計:</span>
                                    <span class="font-bold text-blue-600">${ranking.totalScore}pt</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>`;
            }).join('');
        }

        // リアルタイム勝敗判定表示
        function updateMatchResult() {
            const ownTowers = parseInt(document.getElementById('own-towers').value) || 0;
            const enemyTowers = parseInt(document.getElementById('enemy-towers').value) || 0;
            const display = document.getElementById('match-result-display');
            
            if (enemyTowers > ownTowers) {
                display.textContent = '🎉 勝利';
                display.className = 'w-full px-4 py-3 border border-green-300 rounded-lg bg-green-50 text-center font-semibold text-green-700 text-base';
            } else if (enemyTowers < ownTowers) {
                display.textContent = '😔 敗北';
                display.className = 'w-full px-4 py-3 border border-red-300 rounded-lg bg-red-50 text-center font-semibold text-red-700 text-base';
            } else {
                display.textContent = '⚖️ 引き分け';
                display.className = 'w-full px-4 py-3 border border-yellow-300 rounded-lg bg-yellow-50 text-center font-semibold text-yellow-700 text-base';
            }
        }

        // 入力値制限（リアルタイム）
        function validateTowerInput(input) {
            let value = parseInt(input.value);
            if (value < 0) {
                input.value = 0;
            } else if (value > 3) {
                input.value = 3;
            }
            updateMatchResult();
        }

        // イベントリスナー設定
        document.addEventListener('DOMContentLoaded', function() {
            // 保存されたデータを読み込み
            loadData();
            
            // タブクリックイベント
            document.getElementById('tab-input').addEventListener('click', () => switchTab('input'));
            document.getElementById('tab-ranking').addEventListener('click', () => switchTab('ranking'));
            document.getElementById('tab-data').addEventListener('click', () => switchTab('data'));

            // タワー破壊数入力時に勝敗判定を更新
            document.getElementById('own-towers').addEventListener('input', function() {
                validateTowerInput(this);
            });
            document.getElementById('enemy-towers').addEventListener('input', function() {
                validateTowerInput(this);
            });

            // エンターキーで戦績追加
            document.getElementById('player-name').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    addResult();
                }
            });
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98b1c8eba46f5eaf',t:'MTc1OTg4NjEwMi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
